@use 'sass:math';
/*---------------------------------------
    Breakpoints Mixin
    usage: @include bp(bp320)  {...}
---------------------------------------*/
$breakpoints: (
    'bp320': 320px,
    'bp480': 480px,
    'bp768': 768px,
    'bp1024': 1024px,
    'bp1280': 1280px,
    'bp1366': 1366px,
    'bp1600': 1600px,
    'bp1920': 1920px,
);
@mixin bp($breakpoint) {
    $value: map-get($breakpoints, $breakpoint); //  see _settings.vars.scss
    @if $value != null {
        @media (min-width: $value) {
            @content;
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from '#{$breakpoint}'. "
        + "Please make sure it is defined in '$breakpoints' map.";
    }
}

/*---------------------------------------
    Klemp (clamp)
    @include klemp(margin, 18px, 100px, 1000px);
---------------------------------------*/
@mixin klemp($property: font-size, $size-sm: 12px, $size-lg: 24px, $resolution: 1920px) {
    #{unquote($property)}: $size-sm;

    // @media (min-width: 480px) {
    //     #{unquote($property)}: $size-sm + math.div(($size-lg - $size-sm), 4);
    // }
    // @media (min-width: 768px) {
    //     #{unquote($property)}: $size-sm + math.div(($size-lg - $size-sm), 3);
    // }
    // @media (min-width: 1024px) {
    //     #{unquote($property)}: $size-sm + math.div(($size-lg - $size-sm), 2);
    // }
    // @media (min-width: 1280px) {
    //     #{unquote($property)}: $size-sm + math.div(($size-lg - $size-sm), 1.4);
    // }
    @media (min-width: $resolution) {
        #{unquote($property)}: $size-lg;
    }

    @supports (margin: clamp(1px, 2vw, 3px)) {
        $size-preffered: (math.div(100, math.div($resolution, $size-lg)) * 1vw);
        #{unquote($property)}: clamp(#{$size-sm}, #{$size-preffered}, #{$size-lg});
    }
}
/*---------------------------------------
    Klemp for font-size (clamp)
    @include klempfs(16px, 32px, 64px, 1920px);
---------------------------------------*/
@mixin klempfs($base-size: 16px, $size-sm: 12px, $size-lg: 24px, $resolution: 1920px) {
    font-size: $size-sm;

    // @media (min-width: 480px) {
    //     font-size: $size-sm + math.div(($size-lg - $size-sm), 4);
    // }
    // @media (min-width: 768px) {
    //     font-size: $size-sm + math.div(($size-lg - $size-sm), 3);
    // }
    // @media (min-width: 1024px) {
    //     font-size: $size-sm + math.div(($size-lg - $size-sm), 2);
    // }
    // @media (min-width: 1280px) {
    //     font-size: $size-sm + math.div(($size-lg - $size-sm), 1.4);
    // }
    @media (min-width: $resolution) {
        font-size: $size-lg;
    }
    @supports (font-size: clamp(1px, 2vw, 3px)) {
        $diff: math.div(100, math.div($resolution, ($size-lg - $base-size))) * 1vw;
        font-size: clamp(#{$size-sm}, calc(1rem + #{$diff}), #{$size-lg});
    }
}

// someone's clamp font size
// @mixin fluid-type($min-vw, $max-vw, $min-value, $max-value) {
//     $factor: 1 / ($max-vw - $min-vw) * ($max-value - $min-value);
//     $calc-value: unquote('#{ $min-value - ($min-vw * $factor) } + #{ 100vw * $factor }');
//     font-size: $min-value; // Fallback for older browsers
//     font-size: clamp(#{if($min-value > $max-value, $max-value, $min-value)}, #{$calc-value}, #{if($min-value > $max-value, $min-value, $max-value)});
// }
